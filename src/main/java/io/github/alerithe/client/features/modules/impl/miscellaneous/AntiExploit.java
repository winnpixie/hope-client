package io.github.alerithe.client.features.modules.impl.miscellaneous;

import io.github.alerithe.client.events.EventInput;
import io.github.alerithe.client.events.EventPacket;
import io.github.alerithe.client.features.modules.Module;
import io.github.alerithe.client.utilities.Wrapper;
import io.github.alerithe.events.Register;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockAnvil;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import net.minecraft.util.MovingObjectPosition;

import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class AntiExploit extends Module {
    public AntiExploit() {
        super("AntiExploit", new String[0], Type.MISCELLANEOUS);
        hidden.setValue(true);

        setEnabled(true);
    }

    @Override
    public void disable() {
        super.disable();

        setEnabled(true);
        Wrapper.printChat("\2474AntiExploit can not be turned off.");
    }

    @Register
    private void onRightClick(EventInput.RightClick event) {
        checkAnvilCrash(event);
    }

    private void checkAnvilCrash(EventInput.RightClick event) {
        if (Wrapper.getPlayer().getHeldItem() == null) return;
        if (!(Wrapper.getPlayer().getHeldItem().getItem() instanceof ItemBlock)) return;
        if (Wrapper.getPlayer().getHeldItem().getItemDamage() > 2) return;
        if (!(((ItemBlock) Wrapper.getPlayer().getHeldItem().getItem()).getBlock() instanceof BlockAnvil)) return;
        if (Wrapper.getMC().objectMouseOver == null) return;
        if (Wrapper.getMC().objectMouseOver.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) return;
        if (Wrapper.getBlock(Wrapper.getMC().objectMouseOver.getBlockPos()) instanceof BlockAir) return;

        Wrapper.printChat("\247cAnvil crash detected.");
        event.setCancelled(true);
    }

    @Register
    private void onPacketRead(EventPacket.Read event) {
        checkResourcePack(event);
    }

    private void checkResourcePack(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S48PacketResourcePackSend)) return;

        S48PacketResourcePackSend packet = (S48PacketResourcePackSend) event.getPacket();
        String url = packet.getURL();
        String hash = packet.getHash();
        try {
            String scheme = new URI(url).getScheme();
            boolean isLevelProtocol = "level".equals(scheme);

            if (isLevelProtocol) {
                url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8.toString());
                if ((url.contains("..") || !url.endsWith("/resources.zip"))) {
                    Wrapper.printChat("\247cReceived potentially malicious resource pack request!");

                    event.setCancelled(true);
                    event.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash,
                            C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                }

                return;
            }

            if (!"http".equals(scheme) && !"https".equals(scheme)) {
                Wrapper.printChat("\247cReceived invalid protocol for resource packs!");

                event.setCancelled(true);
                event.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash,
                        C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
