package io.github.alerithe.client.features.modules.impl.miscellaneous;

import io.github.alerithe.client.events.game.EventInput;
import io.github.alerithe.client.events.game.EventPacket;
import io.github.alerithe.client.features.modules.Module;
import io.github.alerithe.client.utilities.Wrapper;
import io.github.alerithe.events.Register;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockAnvil;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.*;
import net.minecraft.util.MovingObjectPosition;

import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class AntiExploit extends Module {
    public AntiExploit() {
        super("AntiExploit", new String[0], Type.MISCELLANEOUS);
        hidden.setValue(true);

        setEnabled(true);
    }

    @Override
    public void onDisable() {
        toggle();

        Wrapper.printMessage("\2474AntiExploit can not be turned off.");
    }

    private void alertUser(String message) {
        Wrapper.printMessage(String.format("\2474[AE] \247c%s", message));
    }

    @Register
    private void onRightClick(EventInput.RightClick event) {
        checkAnvilCrash(event);
    }

    private void checkAnvilCrash(EventInput.RightClick event) {
        if (Wrapper.getPlayer().getHeldItem() == null) return;

        ItemStack heldStack = Wrapper.getPlayer().getHeldItem();
        if (!(heldStack.getItem() instanceof ItemBlock)) return;
        if (!(((ItemBlock) heldStack.getItem()).getBlock() instanceof BlockAnvil)) return;
        if (heldStack.getItemDamage() < 3) return;
        if (Wrapper.getGame().objectMouseOver == null) return;
        if (Wrapper.getGame().objectMouseOver.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK) return;
        if (Wrapper.getBlock(Wrapper.getGame().objectMouseOver.getBlockPos()) instanceof BlockAir) return;

        alertUser(String.format("INVALID ANVIL METADATA \2477(dmg=%d)", heldStack.getItemDamage()));
        event.setCancelled(true);
    }

    @Register
    private void onPacketRead(EventPacket.Read event) {
        checkResourcePack(event);
        checkEntityStatus(event);
        checkEntityDestruction(event);
        checkGameStates(event);
        checkParticleCount(event);
        checkExpOrb(event);
    }

    private void checkResourcePack(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S48PacketResourcePackSend)) return;

        try {
            S48PacketResourcePackSend packet = (S48PacketResourcePackSend) event.getPacket();
            String url = packet.getURL();
            String hash = packet.getHash();
            String scheme = new URI(url).getScheme();

            if ("level".equals(scheme)) {
                // 8 = strlen("level://")
                url = URLDecoder.decode(url.substring(8), StandardCharsets.UTF_8.toString());
                if (url.contains("..") || !url.endsWith("/resources.zip")) {
                    event.setCancelled(true);
                    event.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash,
                            C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));

                    alertUser(String.format("SUSPICIOUS RESOURCE PACK URL \2477(url=%s)", url));
                }

                return;
            }

            if (!"http".equals(scheme) && !"https".equals(scheme)) {
                event.setCancelled(true);
                event.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash,
                        C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));

                alertUser(String.format("INVALID RESOURCE PACK SCHEME \2477(scheme=%s)", scheme));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void checkGameStates(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S2BPacketChangeGameState)) return;

        S2BPacketChangeGameState packet = (S2BPacketChangeGameState) event.getPacket();
        int state = packet.getGameState();
        float n = packet.func_149137_d();

        if (state == 5) {
            event.setCancelled(true);
            alertUser("SUSPICIOUS DEMO SCREEN POP-UP");
        } else if (state == 7 || state == 8) {
            if (n < 0f || n > 1f) {
                event.setCancelled(true);
                alertUser(String.format("ABNORMAL WEATHER STATE \2477(state=%d,n=%.1f)", state, n));
            }
        }
    }

    private void checkExpOrb(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S11PacketSpawnExperienceOrb)) return;

        S11PacketSpawnExperienceOrb packet = (S11PacketSpawnExperienceOrb) event.getPacket();
        if (packet.getXPValue() < 16384) return;

        event.setCancelled(true);
        alertUser(String.format("OBESE EXP ORB \2477(id=%d,xp=%d)", packet.getEntityID(), packet.getXPValue()));
    }

    private void checkParticleCount(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S2APacketParticles)) return;

        S2APacketParticles packet = (S2APacketParticles) event.getPacket();
        if (packet.getParticleCount() < 65536) return;

        event.setCancelled(true);
        alertUser(String.format("EXTREME PARTICLE COUNT \2477(count=%d)", packet.getParticleCount()));
    }

    private void checkEntityStatus(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S19PacketEntityStatus)) return;

        S19PacketEntityStatus packet = (S19PacketEntityStatus) event.getPacket();
        if (packet.getOpCode() != 3) return;
        if (packet.getEntity(Wrapper.getWorld()) != Wrapper.getPlayer()) return;

        event.setCancelled(true);
        alertUser("INVALID KILL OPERATION");
    }

    private void checkEntityDestruction(EventPacket.Read event) {
        if (!(event.getPacket() instanceof S13PacketDestroyEntities)) return;

        S13PacketDestroyEntities packet = (S13PacketDestroyEntities) event.getPacket();
        for (int entityId : packet.getEntityIDs()) {
            if (entityId != Wrapper.getPlayer().getEntityId()) continue;

            event.setCancelled(true);
            alertUser("INVALID SELF DESTRUCT");
            break;
        }
    }
}
